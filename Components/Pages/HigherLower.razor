@page "/higherlower"
@rendermode InteractiveServer
@inject UserState UserState
@inject IConfiguration Configuration

@using Microsoft.AspNetCore.Components.Web

<PageTitle>Higher Lower</PageTitle>

<div class="game-wrapper">
    <h2 class="funky-heading">üî¢ Higher or Lower</h2>

    @if (!UserState.IsLoggedIn)
    {
        <div class="alert alert-warning">üö™ Please log in to play the game.</div>
    }
    else
    {
        <div class="game-instructions mb-3">
            <p>I'm thinking of a number between <strong>1 and 100</strong>. Can you guess it?</p>
        </div>

        @if (!gameEnded)
        {
            <div class="d-flex align-items-center gap-2 mb-3">
                <input type="number" class="form-control funky-input w-auto" style="width: 120px;" @bind="guessInput"
                    @bind:event="oninput" @onkeydown="HandleKeyPress" min="1" max="100" />

                <button class="btn funky-btn" @onclick="SubmitGuess">Guess</button>
            </div>
        }
        else
        {
            <button class="btn btn-success mt-2" @onclick="StartNewGame">üîÅ Play Again</button>
        }

        @if (!string.IsNullOrWhiteSpace(feedback))
        {
            <div class="alert alert-info mt-3">@feedback</div>
        }

        <div class="mt-3 attempts-display">
            <p>üîé Attempts: <strong>@guessCount</strong></p>
        </div>
    }
</div>

@code {
    private int targetNumber;
    private int guessInput = 0;
    private int guessCount = 0;
    private bool gameEnded = false;
    private string feedback = "";
    private int currentSessionId;

    protected override async Task OnInitializedAsync()
    {
        if (UserState.IsLoggedIn)
        {
            await StartNewGame();
        }
    }

    private async Task StartNewGame()
    {
        var random = new Random();
        targetNumber = random.Next(1, 101);
        guessCount = 0;
        guessInput = 0;
        gameEnded = false;
        feedback = "";

        await LogNewSession();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SubmitGuess();
        }
    }

    private async Task SubmitGuess()
    {
        if (gameEnded || guessInput < 1 || guessInput > 100)
            return;

        guessCount++;

        if (guessInput == targetNumber)
        {
            feedback = $"üéâ Correct! You guessed it in {guessCount} tries.";
            gameEnded = true;
            await FinalizeSession(true);
        }
        else if (guessInput < targetNumber)
        {
            feedback = "üìâ Too low. Try again!";
        }
        else
        {
            feedback = "üìà Too high. Try again!";
        }
    }

    private async Task LogNewSession()
    {
        try
        {
            var connStr = Configuration.GetConnectionString("MariaDb");
            using var conn = new MySqlConnector.MySqlConnection(connStr);
            await conn.OpenAsync();

            int userId = await GetUserId(conn);
            int gameId = await GetGameId(conn, "HigherLower");

            var cmd = new MySqlConnector.MySqlCommand(@"
INSERT INTO higherlower_sessions (user_id, game_id, guess_count, won)
VALUES (@user_id, @game_id, 0, FALSE);
SELECT LAST_INSERT_ID();", conn);

            cmd.Parameters.AddWithValue("@user_id", userId);
            cmd.Parameters.AddWithValue("@game_id", gameId);

            currentSessionId = Convert.ToInt32(await cmd.ExecuteScalarAsync());
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error logging session: " + ex.Message);
        }
    }

    private async Task FinalizeSession(bool won)
    {
        try
        {
            var connStr = Configuration.GetConnectionString("MariaDb");
            using var conn = new MySqlConnector.MySqlConnection(connStr);
            await conn.OpenAsync();

            var cmd = new MySqlConnector.MySqlCommand(@"
UPDATE higherlower_sessions
SET guess_count = @guess_count, won = @won, finished_at = NOW()
WHERE id = @id;", conn);

            cmd.Parameters.AddWithValue("@guess_count", guessCount);
            cmd.Parameters.AddWithValue("@won", won);
            cmd.Parameters.AddWithValue("@id", currentSessionId);

            await cmd.ExecuteNonQueryAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error finalizing session: " + ex.Message);
        }
    }

    private async Task<int> GetUserId(MySqlConnector.MySqlConnection conn)
    {
        var cmd = new MySqlConnector.MySqlCommand("SELECT id FROM users WHERE name = @name", conn);
        cmd.Parameters.AddWithValue("@name", UserState.Username);
        var result = await cmd.ExecuteScalarAsync();
        return Convert.ToInt32(result);
    }

    private async Task<int> GetGameId(MySqlConnector.MySqlConnection conn, string gameName)
    {
        var cmd = new MySqlConnector.MySqlCommand("SELECT id FROM games WHERE name = @name", conn);
        cmd.Parameters.AddWithValue("@name", gameName);
        var result = await cmd.ExecuteScalarAsync();
        return Convert.ToInt32(result);
    }
}
