@page "/"
@rendermode InteractiveServer
@inject UserState UserState
@inject IConfiguration Configuration

<PageTitle>Home</PageTitle>

<div class="home-page">
    <h2>Welcome to BlazorTasks</h2>
    <p>Please log in or create an account to access all features.</p>

    <div class="d-flex justify-content-center gap-3 mt-3">
        @if (!UserState.IsLoggedIn)
        {
            <button class="btn btn-primary" @onclick="ShowLogin">Login</button>
            <button class="btn btn-outline-primary" @onclick="ShowSignUp">Sign Up</button>
        }
        else
        {
            <button class="btn btn-outline-danger" @onclick="Logout">Logout</button>
        }
    </div>

    @if (loginSuccess)
    {
        <div class="alert alert-success mt-3">
            Successfully logged in as <strong>@username</strong>.
        </div>
    }

    @if (signUpSuccess)
    {
        <div class="alert alert-success mt-3">
            Successfully signed up as <strong>@lastSignedUpUsername</strong>.
        </div>
    }

    @if (logoutSuccess)
    {
        <div class="alert alert-info mt-3">
            Successfully logged out.
        </div>
    }

    @if (showLogin)
    {
        <div class="modal-overlay">
            <div class="modal-box">
                <h4>Login</h4>

                @if (loginError && !string.IsNullOrWhiteSpace(username) && !string.IsNullOrWhiteSpace(password))
                {
                    <div class="text-danger small mb-2">Invalid username or password.</div>
                }

                @if (loginError && string.IsNullOrWhiteSpace(username))
                {
                    <div class="text-danger small mb-1">Username is required</div>
                }
                <input class="form-control mb-2" @bind="username" placeholder="Enter your Username" />

                @if (loginError && string.IsNullOrWhiteSpace(password))
                {
                    <div class="text-danger small mb-1">Password is required</div>
                }
                <input type="password" class="form-control mb-2" @bind="password" placeholder="Enter your Password" />

                <div class="d-flex gap-2 mt-3">
                    <button class="btn btn-secondary" @onclick="CloseLogin">Cancel</button>
                    <button class="btn btn-primary" @onclick="Login">Login</button>
                </div>
            </div>
        </div>
    }

    @if (showSignUp)
    {
        <div class="modal-overlay">
            <div class="modal-box">
                <h4>Sign Up</h4>

                @if (signUpError && string.IsNullOrWhiteSpace(username))
                {
                    <div class="text-danger small mb-1">Username is required</div>
                }

                @if (signUpDuplicateError)
                {
                    <div class="text-danger small mb-1">Username already exists. Please choose another.</div>
                }
                <input class="form-control mb-2" @bind="username" placeholder="Enter your Username" />

                @if (signUpError && string.IsNullOrWhiteSpace(password))
                {
                    <div class="text-danger small mb-1">Password is required</div>
                }
                <input type="password" class="form-control mb-2" @bind="password" placeholder="Enter your Password" />

                @if (signUpError && (string.IsNullOrWhiteSpace(passwordCheck) || password != passwordCheck))
                {
                    <div class="text-danger small mb-1">
                        @if (string.IsNullOrWhiteSpace(passwordCheck))
                        {
                            <span>Password confirmation is required</span>
                        }
                        else
                        {
                            <span>Passwords do not match</span>
                        }
                    </div>
                }
                <input type="password" class="form-control mb-2" @bind="passwordCheck"
                    placeholder="Confirm your Password" />

                <label for="birthdayInput" class="form-label mt-2">Birthday <span
                        class="text-muted">(optional)</span></label>
                <input id="birthdayInput" type="date" class="form-control mb-2" @bind="birthday" />

                <div class="d-flex gap-2 mt-3">
                    <button class="btn btn-secondary" @onclick="CloseSignUp">Cancel</button>
                    <button class="btn btn-primary" @onclick="SignUp">Sign Up</button>
                </div>
            </div>
        </div>
    }
</div>
@code {
    private bool showLogin = false;
    private bool loginError = false;
    private bool loginSuccess = false;
    private bool showSignUp = false;
    private bool signUpError = false;
    private bool signUpSuccess = false;
    private bool signUpDuplicateError = false;
    private bool logoutSuccess = false;

    private string username = "";
    private string password = "";
    private string passwordCheck = "";
    private string lastSignedUpUsername = "";
    private DateTime? birthday = null;

    private void ShowLogin()
    {
        showLogin = true;
        loginError = false;
        loginSuccess = false;
        logoutSuccess = false;
        ResetForm();
    }

    private void ShowSignUp()
    {
        showSignUp = true;
        signUpError = false;
        signUpDuplicateError = false;
        logoutSuccess = false;
        ResetForm();
    }

    private void CloseLogin()
    {
        showLogin = false;
        loginError = false;
        ResetForm();
    }

    private void CloseSignUp()
    {
        showSignUp = false;
        signUpError = false;
        signUpDuplicateError = false;
        ResetForm();
    }

    private async Task Login()
    {
        loginError = string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password);
        loginSuccess = false;
        logoutSuccess = false;

        if (loginError)
            return;

        try
        {
            var connStr = Configuration.GetConnectionString("MariaDb");
            using var conn = new MySqlConnector.MySqlConnection(connStr);
            await conn.OpenAsync();

            string query = "SELECT COUNT(*) FROM users WHERE name = @username AND password = SHA2(@password, 256)";
            using var cmd = new MySqlConnector.MySqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@username", username);
            cmd.Parameters.AddWithValue("@password", password);

            var result = Convert.ToInt32(await cmd.ExecuteScalarAsync());

            if (result > 0)
            {
                string updateLogin = "UPDATE users SET last_login = NOW() WHERE name = @username";
                using var updateCmd = new MySqlConnector.MySqlCommand(updateLogin, conn);
                updateCmd.Parameters.AddWithValue("@username", username);
                await updateCmd.ExecuteNonQueryAsync();

                UserState.SetUser(username);
                loginSuccess = true;
                loginError = false;
                showLogin = false;

                _ = Task.Delay(5000).ContinueWith(_ =>
                {
                    loginSuccess = false;
                    InvokeAsync(StateHasChanged);
                });
            }
            else
            {
                loginError = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Login error: " + ex.Message);
            loginError = true;
        }
    }

    private async Task SignUp()
    {
        signUpError = string.IsNullOrWhiteSpace(username) ||
        string.IsNullOrWhiteSpace(password) ||
        string.IsNullOrWhiteSpace(passwordCheck) ||
        password != passwordCheck;

        if (signUpError)
            return;

        try
        {
            var connStr = Configuration.GetConnectionString("MariaDb");
            using var conn = new MySqlConnector.MySqlConnection(connStr);
            await conn.OpenAsync();

            var checkCmd = new MySqlConnector.MySqlCommand("SELECT COUNT(*) FROM users WHERE name = @username", conn);
            checkCmd.Parameters.AddWithValue("@username", username);
            var existing = Convert.ToInt32(await checkCmd.ExecuteScalarAsync());

            if (existing > 0)
            {
                signUpError = true;
                signUpDuplicateError = true;
                return;
            }

            signUpDuplicateError = false;

            string insertQuery = @"INSERT INTO users (name, password, birthday)
VALUES (@username, SHA2(@password, 256), @birthday)";
            using var cmd = new MySqlConnector.MySqlCommand(insertQuery, conn);
            cmd.Parameters.AddWithValue("@username", username);
            cmd.Parameters.AddWithValue("@password", password);
            cmd.Parameters.AddWithValue("@birthday", birthday.HasValue ? birthday.Value.ToString("yyyy-MM-dd") : null);

            await cmd.ExecuteNonQueryAsync();

            lastSignedUpUsername = username;
            signUpSuccess = true;
            showSignUp = false;

            string updateLogin = "UPDATE users SET last_login = NOW() WHERE name = @username";
            using var updateCmd = new MySqlConnector.MySqlCommand(updateLogin, conn);
            updateCmd.Parameters.AddWithValue("@username", username);
            await updateCmd.ExecuteNonQueryAsync();

            UserState.SetUser(username);

            await InvokeAsync(StateHasChanged);

            _ = Task.Delay(5000).ContinueWith(_ =>
            {
                signUpSuccess = false;
                InvokeAsync(StateHasChanged);
            });

            ResetForm();
        }
        catch (Exception ex)
        {
            Console.WriteLine("SignUp error: " + ex.Message);
            signUpError = true;
        }
    }

    private void Logout()
    {
        UserState.Logout();
        loginSuccess = false;
        signUpSuccess = false;
        logoutSuccess = true;
        ResetForm();
        StateHasChanged();

        _ = Task.Delay(5000).ContinueWith(_ =>
        {
            logoutSuccess = false;
            InvokeAsync(StateHasChanged);
        });
    }

    private void ResetForm()
    {
        username = "";
        password = "";
        passwordCheck = "";
        birthday = null;
    }
}
